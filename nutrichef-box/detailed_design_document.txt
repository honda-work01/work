==================================================
NutriChef Box - 詳細設計書
==================================================

## 1. プロジェクト概要

- **アプリケーション名:** NutriChef Box
- **目的:** レシピ、食材在庫、買い物リストの管理をローカル環境で完結して行えるデスクトップアプリケーション。栄養素の追跡機能も提供する。

---

## 2. アーキテクチャ

本アプリケーションは、Web技術（HTML, CSS, JavaScript）をベースに、Electronフレームワークを用いてクロスプラットフォームのデスクトップアプリケーションとして構築されている。

- **フレームワーク: Electron**
  - `file:///` プロトコルにおけるブラウザのセキュリティ制限（ローカルファイルへのアクセス制限など）を克服し、ネイティブアプリケーションのような体験（ローカルファイル読み込み、OS言語の取得など）を提供するために採用。

- **メインプロセス (`main.js`)**
  - アプリケーションのライフサイクル（起動、終了など）を管理する。
  - アプリケーションウィンドウ（`BrowserWindow`）を生成し、`index.html` を読み込む。
  - Node.js APIへの完全なアクセス権を持つ。

- **レンダラープロセス (`index.html`, `app.js`, `style.css`)**
  - アプリケーションのUI（ユーザーインターフェース）の描画と、ユーザーからのすべてのインタラクションを処理する。
  - `main.js` の設定 (`nodeIntegration: true`) により、このプロセスもNode.js API（`fs`, `path`など）にアクセス可能。

- **データストレージ: IndexedDB**
  - すべてのユーザーデータ（レシピ、在庫）をクライアントサイドに永続的に保存するために使用。これにより、アプリケーションは完全にオフラインで動作可能。
  - `NutriChefDB` という名前のデータベースに、`recipes` と `inventory` のオブジェクトストアを作成。

- **国際化 (i18n):**
  - `locales/` ディレクトリ内に言語ごとのJSONファイル（`ja.json`, `en.json`）を配置。
  - `app.js` 内で、Electron環境で利用可能なNode.jsの `fs.readFileSync` を使用して、これらのJSONファイルを同期的に読み込む。これにより、ブラウザの `fetch` APIで発生していた問題を回避し、言語切り替えを確実に行う。

---

## 3. 主要機能（詳細）

- **レシピ管理:**
  - **CRUD操作:** レシピの新規作成、一覧表示、編集、削除が可能。
  - **Markdown対応:** レシピの内容（作り方など）はMarkdown形式で記述可能。`marked.js` ライブラリを用いてHTMLに変換して表示する。

- **在庫管理:**
  - **CRUD操作:** 食材の品名と数量を登録、編集、削除が可能。

- **買い物リスト:**
  - 登録されている全レシピの材料と、現在の在庫を比較し、不足している材料を自動的にリストアップする。

- **栄養素グラフ:**
  - **可視化:** 登録レシピの全材料から、三大栄養素（炭水化物、タンパク質、脂質）の合計を計算し、`Chart.js` を用いて円グラフで表示する。
  - **栄養素データベース:** `app.js` 内に `NUTRIENT_DATA` オブジェクトとして、少数の基本的な食材の栄養素データをハードコードしている。
  - **空状態の処理:** 計算対象のデータが存在しない場合、「レシピを登録すると...」というメッセージをキャンバスに描画し、ユーザーに次のアクションを促す。

- **UI/UX:**
  - **モダンデザイン:** クリーンで直感的なデザインを `style.css` で実装。
  - **モーダルフォーム:** データの入力・編集は、すべてモーダルウィンドウ形式のフォームで行い、`prompt` を使用しないことでユーザー体験を向上。
  - **トースト通知:** 「保存しました」などの操作結果を、画面下部に短時間表示される通知でユーザーにフィードバックする。
  - **言語スイッチャー:** ヘッダーのドロップダウンで、いつでも言語（日本語/英語）の切り替えが可能。

---

## 4. ファイル構造

`nutrichef-box/`
├── **.gitignore**         # Gitで追跡しないファイル（node_modulesなど）を定義
├── **app.js**             # アプリケーションの主要ロジック（UI操作、DB処理など）
├── **index.html**         # アプリケーションの基本となるHTML構造
├── **locales/**           # 国際化用の言語ファイルを格納
│   ├── en.json
│   └── ja.json
├── **main.js**            # Electronのメインプロセス。アプリの起動とウィンドウ管理
├── **manifest.json**      # Web App Manifest（PWAの名残だが、現状は未使用）
├── **node_modules/**      # `npm install` でインストールされた依存パッケージ
├── **package-lock.json**  # 依存関係のバージョンをロックするファイル
├── **package.json**       # プロジェクト情報と依存関係（Electronなど）を定義
├── **style.css**          # アプリケーションの全スタイルを定義
└── **sw.js**              # Service Worker（現在は無効化されている）

---

## 5. セットアップと実行

1.  **前提:** `Node.js` と `npm` がインストールされていること。
2.  **インストール:** ターミナルで `nutrichef-box` ディレクトリに移動し、`npm install` を実行。
3.  **実行:** `npm start` を実行。

---

## 6. 今後の改善点

- **パッケージ化:** Electronのパッケージング機能（`electron-packager`や`electron-builder`など）を利用し、`npm`コマンドなしで直接起動できる単一の実行ファイル（`.exe`, `.app`など）を作成する。
- **Service Workerの再有効化:** パッケージ化されたアプリケーションにおいて、より高度なキャッシュ戦略を実装するためにService Workerを再有効化・設定する。
- **栄養素データベースの拡充:** 現在ハードコードされている栄養素データを、より網羅的な外部ファイルやAPIから取得する仕組みを検討する。
